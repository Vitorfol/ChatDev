[Develop an academic management system in Python that manages Student, Course, and Teacher entities with the following requirements, evolving incrementally in concept (preserve semantics and state where possible, like domain-driven design with living ontologies): - Student entity: id (int, PK), name (string), email (string). - Course entity: id (int, PK), title (string), level (string). - Teacher entity: id (int, PK), name (string), department (string). - Relationships: Many-to-many enrollment (Student enrolls in Course), many-to-many teaching (Teacher teaches Course). Use explicit tables if needed. - Provide CRUD endpoints for all entities and relationships. - Use Python 3.11, FastAPI backend, Pydantic models, SQLite persistence, minimal Streamlit UI for inspection (focus on backend). - Include zero-downtime migrations or scripts. - Follow domain-driven design: Separate entities, repositories, services.]